import os

KEEP_BUILD_FOLDER = False  # Set to True if you want to keep the build folder after compilation

folder = os.path.dirname(os.path.abspath(__file__))
RESULT_FOLDER = os.path.join(folder, 'build')
RESULT_FILE_H = "l4dFiles.hpp"
RESULT_FILE_C = "l4dFiles.cpp"

JSON_H_FILE = 'json.hpp'
C_Files = ('l4dConfig.cpp', 'l4dStorage.cpp')
H_Files = ('l4dConfig.h', 'l4dStorage.h')

INCLUDES = ('#include "l4dConfig.h"', '#include "l4dStorage.h"')

license_header = """// This file is generated by make_l4dFiles.py
// Do not edit this file directly.
// Instead, edit the source files and run this script to regenerate it.
// License: GNU General Affero General Public License v3.0
// https://www.gnu.org/licenses/agpl-3.0.en.html
// Copyright (C) 2025, Marcin Osmolak-Rogaluk | Contact: <mosmo2k@gmail.com>
"""

os.makedirs(RESULT_FOLDER, exist_ok=True)

# Ensure the result folder is empty
for file in os.listdir(RESULT_FOLDER):
    file_path = os.path.join(RESULT_FOLDER, file)
    if os.path.isfile(file_path):
        os.remove(file_path)

# Ensure that the json.hpp file is present in the current folder
if not os.path.exists(os.path.join(folder, JSON_H_FILE)):
    raise FileNotFoundError(f"{JSON_H_FILE} not found in {folder}. Please include nlohmann/json.hpp in the same folder as this script.")

# Ensure that source files are present in the current folder
for file_name in (C_Files + H_Files):
    if not os.path.exists(os.path.join(folder, file_name)):
        raise FileNotFoundError(f"{file_name} not found in {folder}. Please ensure all source files are present.")

# Copy json.hpp to the result folder
json_h_path = os.path.join(folder, JSON_H_FILE)
if os.path.exists(json_h_path):
    with open(json_h_path, 'r') as f:
        json_h_content = f.read()
    with open(os.path.join(RESULT_FOLDER, JSON_H_FILE), 'w') as f:
        f.write(json_h_content)
else:
    raise FileNotFoundError(f"{JSON_H_FILE} not found in {folder}")


#
# HEADER FILE
#

buffer = ""

# Read each file and append its content to the buffer
for file_name in H_Files:
    file_path = os.path.join(folder, file_name)
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            content = f.read()
        buffer += f"// {file_name}\n{content}\n\n"
    else:
        raise FileNotFoundError(f"{file_name} not found in {folder}")

# Remove any includes that are json.hpp
buffer = buffer.replace('#include "json.hpp"', '')

# Swap includes defined in INCLUDES with #include "l4dFiles.hpp"
for include in INCLUDES:
    buffer = buffer.replace(include, f'#include "{RESULT_FILE_H}"')

# Remove many newlines
buffer = buffer.replace('\n\n', '\n')

# Include the json.hpp file content at the bottom of the buffer
json_h_path = os.path.join(RESULT_FOLDER, JSON_H_FILE)
if os.path.exists(json_h_path):
    with open(json_h_path, 'r') as f:
        json_h_content = f.read()
    buffer += f"\n// {JSON_H_FILE}\n{json_h_content}\n"
else:
    raise FileNotFoundError(f"{JSON_H_FILE} not found in {RESULT_FOLDER}")

# Add the include guard
include_guard = f"#ifndef L4DFILES_HPP\n#define L4DFILES_HPP\n\n"
buffer = include_guard + buffer + "\n#endif // L4DFILES_HPP\n"

# Add the license header at the top of the buffer
buffer = license_header + "\n" + buffer

# Write the buffer to the l4dFiles.hpp file
with open(os.path.join(RESULT_FOLDER, RESULT_FILE_H), 'w') as f:
    f.write(buffer)


#
# CPP FILE
#

buffer = ""

# Read each file and append its content to the buffer
for file_name in C_Files:
    file_path = os.path.join(folder, file_name)
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            content = f.read()
        buffer += f"// {file_name}\n{content}\n\n"
    else:
        raise FileNotFoundError(f"{file_name} not found in {folder}")
    
# Remove any includes that are json.hpp
buffer = buffer.replace('#include "json.hpp"', '')

# Swap includes defined in INCLUDES with #include "l4dFiles.hpp"
for include in INCLUDES:
    buffer = buffer.replace(include, f'#include "{RESULT_FILE_H}"')

# Remove many newlines
buffer = buffer.replace('\n\n', '\n')

# Add the include for json.hpp at the top of the buffer
buffer = f'#include "{JSON_H_FILE}"\n\n' + buffer

# Add the license header at the top of the buffer
buffer = license_header + "\n" + buffer

# Write the buffer to the l4dFiles.c file
with open(os.path.join(RESULT_FOLDER, RESULT_FILE_C), 'w') as f:
    f.write(buffer)


#
# Compilation
#

Succesed = True  # Variable to track if the script runs successfully

cpp_files = [os.path.join(RESULT_FOLDER, RESULT_FILE_C)]
h_files = [os.path.join(RESULT_FOLDER, RESULT_FILE_H), os.path.join(RESULT_FOLDER, JSON_H_FILE)]

# Create a Makefile to compile the files
makefile_content = f"""# Makefile for l4dFiles 
CC = g++
CFLAGS = -std=c++17 -Wall -Wextra -I{RESULT_FOLDER}
TARGET = l4dFiles.a
OBJS = {' '.join([os.path.splitext(os.path.basename(f))[0] + '.o' for f in cpp_files])}

all: $(TARGET)

$(TARGET): $(OBJS)
\tar rcs $@ $^

%.o: %.cpp
\t$(CC) $(CFLAGS) -c $< -o $@

clean:
\trm -f $(OBJS) $(TARGET)
"""

# Write the Makefile to the result folder
makefile_path = os.path.join(RESULT_FOLDER, 'Makefile')
with open(makefile_path, 'w') as f:
    f.write(makefile_content)   
print(f"Files generated in {RESULT_FOLDER}")

# Create out folder if it doesn't exist
out_folder = os.path.join(folder, 'out')
os.makedirs(out_folder, exist_ok=True)

# Use make to compile the files
os.system(f"make -C {RESULT_FOLDER} > {os.path.join(out_folder, 'make_output.txt')} 2>&1")

# Move the compiled library to the out folder
compiled_lib = os.path.join(RESULT_FOLDER, 'l4dFiles.a')
if os.path.exists(compiled_lib):
    os.rename(compiled_lib, os.path.join(out_folder, 'l4dFiles.a'))
else:
    print("Compilation failed. Check the make_output.txt for details.")
    Succesed = False

# Copy the header file to the out folder
header_file = os.path.join(RESULT_FOLDER, RESULT_FILE_H)
if os.path.exists(header_file):
    os.rename(header_file, os.path.join(out_folder, RESULT_FILE_H))

# Remove build folder
if not KEEP_BUILD_FOLDER or not Succesed:
    if os.path.exists(RESULT_FOLDER):
        os.system(f"rm -rf {RESULT_FOLDER}")

# Remove make_output.txt if successful
if Succesed:
    make_output_file = os.path.join(out_folder, 'make_output.txt')
    if os.path.exists(make_output_file):
        os.remove(make_output_file)

# Print success message
print(f"Compilation successful. Library is available in {os.path.join(out_folder, 'l4dFiles.a')}")
print("You can now link this library in your project.")