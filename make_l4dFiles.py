import os

folder = os.path.dirname(os.path.abspath(__file__))
RESULT_FOLDER = os.path.join(folder, 'build')
RESULT_FILE = "l4dFiles.hpp"

JSON_H_FILE = 'json.hpp'
Files = ('l4dConfig.h', 'l4dStorage.h', 'l4dConfig.cpp', 'l4dStorage.cpp')
INCLUDES = ('#include "l4dConfig.h"', '#include "l4dStorage.h"')
os.makedirs(RESULT_FOLDER, exist_ok=True)

# Ensure the result folder is empty
for file in os.listdir(RESULT_FOLDER):
    file_path = os.path.join(RESULT_FOLDER, file)
    if os.path.isfile(file_path):
        os.remove(file_path)

# Ensure that the json.hpp file is present in the current folder
if not os.path.exists(os.path.join(folder, JSON_H_FILE)):
    raise FileNotFoundError(f"{JSON_H_FILE} not found in {folder}. Please include nlohmann/json.hpp in the same folder as this script.")

# Ensure that source files are present in the current folder
for file_name in Files:
    if not os.path.exists(os.path.join(folder, file_name)):
        raise FileNotFoundError(f"{file_name} not found in {folder}. Please ensure all source files are present.")

# Copy json.hpp to the result folder
json_h_path = os.path.join(folder, JSON_H_FILE)
if os.path.exists(json_h_path):
    with open(json_h_path, 'r') as f:
        json_h_content = f.read()
    with open(os.path.join(RESULT_FOLDER, JSON_H_FILE), 'w') as f:
        f.write(json_h_content)
else:
    raise FileNotFoundError(f"{JSON_H_FILE} not found in {folder}")

buffer = ""

# Read each file and append its content to the buffer
for file_name in Files:
    file_path = os.path.join(folder, file_name)
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            content = f.read()
        buffer += f"// {file_name}\n{content}\n\n"
    else:
        raise FileNotFoundError(f"{file_name} not found in {folder}")

# Remove any includes that are json.hpp
buffer = buffer.replace('#include "json.hpp"', '')

# Remove any includes that are in the INCLUDES list
for include in INCLUDES:
    buffer = buffer.replace(include, '')

# Remove many newlines
buffer = buffer.replace('\n\n', '\n')

# Add the include for json.hpp at the top of the buffer
buffer = f'#include "{JSON_H_FILE}"\n\n' + buffer

# Add pragma once to the top of the buffer
buffer = '#pragma once\n\n' + buffer

# Add the include guard
include_guard = f"#ifndef L4DFILES_HPP\n#define L4DFILES_HPP\n\n"
buffer = include_guard + buffer + "\n#endif // L4DFILES_HPP\n"

# Add the license header at the top of the buffer
license_header = """// This file is generated by make_l4dFiles.py
// Do not edit this file directly.
// Instead, edit the source files and run this script to regenerate it.
// License: GNU General Affero General Public License v3.0
// https://www.gnu.org/licenses/agpl-3.0.en.html
// Copyright (C) 2025, Marcin Osmolak-Rogaluk <
"""
buffer = license_header + "\n" + buffer

# Write the buffer to the l4dFiles.hpp file
with open(os.path.join(RESULT_FOLDER, RESULT_FILE), 'w') as f:
    f.write(buffer)